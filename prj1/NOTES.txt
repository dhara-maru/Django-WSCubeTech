CSRF Token is compulsory when using post method in forms in django.
A CSRF (Cross-Site Request Forgery) token in Django is a security measure to protect your web application from a type of attack where a malicious site tricks a user into performing actions on another site where they are authenticated.
Why Use It?: It ensures that the actions you perform on the website are intentional and not triggered by another site, keeping your data safe.


//***************************** PAGE REDIRECTION (WSCUBE TECH VIDEO 27) *************************************
//for page redirection, import this 
from django.http import HttpResponse,HttpResponseRedirect

//and just add this line inside the block where you want to redirect
return HttpResponseRedirect('/about1/')

//when you want the data to show in url
url="/about1/?finalans={}".format(finalans)
return HttpResponseRedirect(url)

//and in that pages, view method :
def about1(request):
    if request.method == "GET":
        output=request.GET.get('finalans')
        
    return render(request,"about.html",{'finalans':output})

//and access in that page anywhere you want like :
<h1>{{finalans}}</h1>

//***************************** ACTION attribute in FORMS (WSCUBE TECH VIDEO 28) *************************************
//first, have this as an action attribute in form
<form class="container-fluid" method="post" action="{% url 'submitform1' %}">

//in urls.py, add its path
 path('submitform1/', views.submitform1, name='submitform1'),

 //in views.py, add its method. YOU CAN FETCH THE DATA IN THAT PAGE LIKE THIS :
def submitform1(request):
   finalans=0
   data={}
   try:
        if request.method=="POST":
             n1=int(request.POST.get('num1'))
             n2=int(request.POST.get('num2'))
             finalans=n1+n2
             data={
                 'num1': n1,
                 'num2':n2,
                 'finalans':finalans
             }
           
             return HttpResponse(finalans)
   except:
        pass

//***************************** WORKING WITH FORMS (WSCUBE TECH VIDEO 29) *************************************

//make forms.py file inside your prj in folder of urls.py, setting.py and views.py exc
//in forms.py file
from django import forms

//now make a class
class userforms(forms.Form)
//here, classname can be of your choice, in params, the 'forms' is the class you just imported from django & 'Form' is its object which is also builtin in django.

//now you can have things as per your fields in form like this -
num1=forms.CharField() //the 'num1' & 'num2' is from the 'NAME ATTRIBUTE' in the form
num2=forms.CharField() // the 'forms' is again the class name and CharField is the data type of the field.

//import this in Views.py
from .forms import userforms

//call this in your userforms page's method
 fn=userforms()

 data={'form':fn}
 data={
                 'num1': n1,
                 'num2':n2,
                 'finalans':finalans,
                 'form':fn //use this
             }

//and remove the fields from userforms.html and call 'form' key there.
// so it will work the same + gives extra features like validation. 
this is why you have to use django forms.

//you can have or change its attribute too like this -
num1=forms.CharField(
        label="Value 1",
        required=False,
        widget=forms.Textarea(
         attrs={'class': 'form-control'}
    ))

//*********************************** MANUAL FORM VALIDATION VID 33 ***************************************
// add this in your views method
if request.POST.get('num1')=='':
                return render(request,"evenorodd.html",{'error':True})

//and add this where you want to show the alert validation in your form
 {% if error %}
  <div class="alert alert-danger" role="alert">
    Please enter a value !
  </div>
  {% endif %}

//***************************************MODELS IN DJANGO VID 34 ********************************
//FOR MORE NOTES, REFER TO DJANGO DOC MODELS : 
A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the data youâ€™re storing. Generally, each model maps to a single database table.




//****************************************** CREATE MODELS IN DJANGO VID 35 *********************************
// how to create a MODEL
python manage.py startapp modelname
//it will create a folder where you can find Models.py (make models fields there) and Admin.py (Register your models fields there)

//in models.py
from django.db import models
class Services(models.Model):
    service_icon = models.CharField(max_length=50)
    service_title = models.CharField(max_length=50)
    service_desc = models.TextField()

//connect your model name in INSTALLED APPS in settings.py

//make migrations
python manage.py makemigrations

//write this too
python manage.py migrate


//to permit data in adminpanel you must add 'admin.ModelAdmin' in params
class serviceadmin(admin.ModelAdmin):
    list_display=('service_icon','service_title','service_desc')

//then register in admin.py like this
admin.site.register(Services, serviceadmin)

//****************************************** DISPLAY DATA FROM TABLE IN DJANGO VID 36 ****************************

//import model in views.py
from service.models import Services

//write like this where u wanna show the data
def service1(request):
    # Fetch all records from the newserviceclass model
    newservicedata = newserviceclass.objects.all()  # Correct usage
    data = {
        'servicesdata': newservicedata
    }
    return render(request, "service.html", data)

//in .html page where you wanna show data :
 {% for n in servicesdata %}
          <div class="col-md-4 ">
            <div class="box ">
              <div class="img-box">
                <img src="/static/images/s1.png" alt="">
              </div>
              <div class="detail-box">
                <h5>
                  {{n.service_title}}
                </h5>
                <p>
                  {{n.service_desc}}
                </p>
                <a href="">
                  Read More
                </a>
              </div>
            </div>
          </div>
          {% endfor %} 


//************************************* ASCENDING DESCENDING DATA VID 37 **********************************
//ASCENDING by id
 newservicedata = newserviceclass.objects.all().order_by('id')
//DESCENDING by id
 newservicedata = newserviceclass.objects.all().order_by('-id')


//************************************* LIMIT on DATA VID 38 **********************************
//it will show only 3 data
newservicedata = newserviceclass.objects.all().order_by('-id')[:3]
//it will show only 2nd, 3rd, 4th data (means 2 to 5)
newservicedata = newserviceclass.objects.all().order_by('-id')[2:5]

//************************************* TEMPLATE FILTERS VID 39 **********************************
//use this with pipe sign to modify the dynamic data. for ex, 
{{n.service_desc | upper }} #this will convert the desc data in uppercase 
{{n.service_desc | first }} #this will convert the desc data's first letter
{{n.service_desc | capfirst }} #this will convert the desc data's first letter's capital
{{n.service_desc | wordcount }} 
{{n.service_desc | length }} , etc.

//************************************* TinyMCE VID 40 **********************************
1. pip install django-tinymce
2. add it in installed apps 'tinymce'
3. import like this in ur models :
from tinymce.models import HTMLField
class news(models.Model):
    news_title=models.CharField(max_length=100)
    news_desc=HTMLField()

//************************************* MARQUEE TAG VID 41 **********************************
<marquee style="color:white">
  {% for news in newsdata %}
  {{news.news_title}} &nbsp &nbsp &nbsp 
  {% endfor %}
</marquee>

//************************************* display table data with dynamic url in page VID 42 **********************************
//1. added this type of anchor tag
<marquee onmouseover="stop()" onmouseout="start()" style="color:white">
  {% for news in newsdata %}
  <a href="/newsdetail1/{{news.id}}">{{news.news_title}} </a>&nbsp &nbsp &nbsp 
  {% endfor %}
</marquee>

//2. passed id in views.py
//def newsdetail(request, newsid):
    return render(request,"newsdetail.html")

//3. added a url with id
path('newsdetail1/<newsid>',views.newsdetail)

//4.made a redirecting page as newsdetails.html 
//5. fetch data like this method
def newsdetail(request, newsid):
    newsdetail = news.objects.get(id=newsid)
    data={
        'newsdetail':newsdetail,
    }
    return render(request,"newsdetail.html",data)
//6. give params in newsdetail.html page like this 
<h2>{{newsdetail.news_title}}</h2>
<p>{{newsdetail.news_desc | safe}}</p>
//this is how i can give dynamic data through table id and fetch it in page

//***************************** RESET DJANGO ADMIN PASSWORD through command VID 43 *******************************
//1. write in cmd terminal
python manage.py changepassword admin //admin is the username

//************************* FILTER() SEARCH FUNCTIONALIY VID 44 ***********************************
//1.make a search bar with name attribute
 <input class="form-control me-2" name="servicename" type="search" placeholder="Search" aria-label="Search">
              
//2. have this in ur views.py
def service1(request):
    # Fetch all records from the newserviceclass model
    newservicedata = newserviceclass.objects.all().order_by('-id')

    # Check if there is a GET request with 'servicename' parameter
    st = request.GET.get('servicename')
    if st:
        # Filter the newservicedata based on the 'service_title' field
        newservicedata = newserviceclass.objects.filter(service_title__icontains=st).order_by('-id')

    # Pass the filtered or unfiltered data to the template
    data = {
        'servicesdata': newservicedata
    }

    return render(request, "service.html", data)

//************************* AUTO SLUGFIELD  VID 45 ***********************************
//video ignored

//***************************** PAGINATION VID 46 *****************************
//1. import paginator
from django.core.paginator import Paginator
//2. add this 
def service1(request):

    newservicedata = newserviceclass.objects.all().order_by('-id')
    paginator=Paginator(newservicedata,3)
    page_number=request.GET.get('page')
    servicedatafinal=paginator.get_page(page_number)

    st = request.GET.get('servicename')
    if st:
        # Filter the newservicedata based on the 'service_title' field
        newservicedata = newserviceclass.objects.filter(service_title__icontains=st).order_by('-id')

    # Pass the final paged data to the template
    data = {
        'servicesdata': servicedatafinal
    }

    return render(request, "service.html", data)

//***************************** LAST PAGE PAGINATION VID 47 *****************************
//1. servies.html
      <li class="page-item"><a class="page-link" href="/service1/?page={{lastpage}}"">Last</a></li>
//2.views.py
 totalpage=servicedatafinal.paginator.num_pages
 //in data
 data = {
        'servicesdata': servicedatafinal,
        'lastpage':totalpage
    }

//3. using list comprehension for assigning page numbers
   data = {
        'servicesdata': servicedatafinal,
        'lastpage':totalpage,
        'totalpagelist':[n+1 for n in range(totalpage)]
    }
//in .html page for numbered pages
 {% for n in totalpagelist %}
      <li class="page-item"><a class="page-link" href="/service1/?page={{n}}">{{n}}</a></li>
      {% endfor %}

